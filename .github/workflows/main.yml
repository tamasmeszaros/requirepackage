name: CI-all-platforms

on: [push]

jobs:

  # buid-gcc-fedora:

  #   runs-on: ubuntu-latest

  #   container:
  #     image:  fedora
      
  #   steps:
  #     - uses: actions/checkout@v1
  #     - name: Install needed packages
  #       run: yum -y install cmake g++ wget patch git gtk2-devel mesa-libGL-devel mesa-libGLU-devel ninja-build make
  #     - name: Build the example
  #       run: |
  #         mkdir -p build-fedora 
  #         cd build-fedora
  #         cmake ../tests -DRP_ENABLE_DOWNLOADING=ON
  #     - name: Build all packages
  #       run: |
  #         mkdir -p build-all-fedora
  #         cd build-all-fedora
  #         cmake ../deps -GNinja -DBUILD_SHARED_LIBS=OFF -DCMAKE_BUILD_TYPE=Release -DRP_INSTALL_PREFIX=/opt/PrusaSlicerDeps/
  #         cmake --build .
  #     - uses: actions/upload-artifact@v1
  #       with:
  #         name: deps-linux-fedora-static-64bit
  #         path: deps-linux-fedora-static-64bit.tar.gz

  buid-gcc-centos6:

    runs-on: ubuntu-latest

    container:
      image:  meszarosq/centos6-devtoolset7:latest
      
    steps:
      - uses: actions/checkout@v1
      - name: Build the example
        run: |
          source /opt/rh/devtoolset-7/enable
          mkdir -p build-centos6 
          cd build-centos6
          cmake ../tests -DRP_ENABLE_DOWNLOADING=ON
      - name: Build all packages
        run: |
          source /opt/rh/devtoolset-7/enable
          mkdir -p build-all-centos6
          cd build-all-centos6 
          cmake ../deps -GNinja -DBUILD_SHARED_LIBS=OFF -DCMAKE_BUILD_TYPE=Release -DRP_INSTALL_PREFIX=/opt/PrusaSlicerDeps/
          cmake --build .
      - name: Create archive of dependencies
        run: tar -cvzhf deps-linux-static-64bit.tar.gz /opt/PrusaSlicerDeps
      # - uses: actions/upload-artifact@v1
      #   with:
      #     name: deps-linux-static-64bit
      #     path: deps-linux-static-64bit.tar.gz

  build-gcc:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
    - name: Install opengl
      run: sudo apt update && sudo apt install -y libgtk2.0-dev libgl1-mesa-dev libglu1-mesa-dev ninja-build
    - name: Build the example
      run: mkdir -p build-gcc && cd build-gcc && cmake ../tests -DRP_ENABLE_DOWNLOADING=ON
    - name: Build all packages
      run: |
        mkdir -p build-all-gcc 
        cd build-all-gcc
        cmake ../deps -GNinja -DBUILD_SHARED_LIBS=OFF -DCMAKE_BUILD_TYPE=Release
        cmake --build .

  build-mac:

    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v1
    - name: Build the example
      run: mkdir -p build-mac && cd build-mac && cmake ../tests -DRP_ENABLE_DOWNLOADING=ON -DCMAKE_OSX_DEPLOYMENT_TARGET=10.9
    - name: Build all packages
      run: |
        export PATH=$(brew --prefix gettext)/bin:$PATH
        msgfmt --version
        mkdir -p build-all-mac 
        cd build-all-mac 
        cmake ../deps -DCMAKE_OSX_DEPLOYMENT_TARGET=10.9 -DBUILD_SHARED_LIBS=OFF -DCMAKE_BUILD_TYPE=Release 
        cmake --build . -- -j

  build-msvc:

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v1
    - name: Build the example
      run: |
        mkdir build-win 
        cd build-win 
        cmake ../tests -DRP_ENABLE_DOWNLOADING=ON
    - name: Build all packages
      run: |
        mkdir build-all-win
        cd build-all-win
        cmake ../deps -DBUILD_SHARED_LIBS=OFF
        cmake --build . --config Release -- /m
        cmake --build . --config Debug -- /m
    - uses: actions/upload-artifact@v1
      with:
        name: windows-static-64bit
        path: build-all-win/destdir/usr/local

  build-mingw:

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v1
    - name: Download ninja
      run: choco install ninja
    - name: Build the example
      run: |
        mkdir build-mingw
        cd build-mingw 
        cmake ../tests -GNinja -DCMAKE_CXX_COMPILER=x86_64-w64-mingw32-g++ -DCMAKE_C_COMPILER=x86_64-w64-mingw32-gcc -DRP_ENABLE_DOWNLOADING=ON
    - name: Build all packages
      run: |
        mkdir build-all-mingw
        cd build-all-mingw
        cmake ../deps -GNinja -DCMAKE_CXX_COMPILER=x86_64-w64-mingw32-g++ -DCMAKE_C_COMPILER=x86_64-w64-mingw32-gcc -DBUILD_SHARED_LIBS=OFF -DRP_FORCE_DOWNLOADING=ON
        cmake --build . --config Release
    - uses: actions/upload-artifact@v1
      with:
        name: mingw-static-64bit
        path: build-all-mingw/destdir/usr/local
